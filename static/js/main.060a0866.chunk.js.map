{"version":3,"sources":["components/Player.js","videoDirectory.js","components/Controls.js","App.js","serviceWorker.js","index.js"],"names":["id","videoLink","onVideoEnd","showRef","videoRef","useRef","useEffect","className","onEnded","ref","key","controls","preload","src","type","directory","start","label","link","choices","A1","name","B1","A2","AB2","B2","buttonChecked","startClick","choiceClick","addButtonRef","buttonA","buttonB","onButtonClick","side","e","onClick","dir","App","initialRender","useState","countdownStatus","setCountdownStatus","buttonRefs","setButtonRefs","videoRefs","setVideoRefs","p1","playerLinks","setPlayerLinks","dirRef","setDirRef","activePlayer","setActivePlayer","queuedPlayer","setQueuedPlayer","queuedChoice","setQueuedChoice","setButtonChecked","ending","setEnding","creditShow","setCreditShow","players","setVisiblePlayer","propPlayer","console","log","forEach","player","current","classList","remove","add","startNextVideo","play","addVideoRef","newRefs","buttonOpacityToggle","bool","Object","keys","buttonKey","vacantPlayers","filter","links","choice","i","loadChoices","remainingTime","duration","currentTime","setTimeout","videoLength","Math","random","onChoiceClick","A","contains","B","Player","p2","p3","Controls","currentTarget","style","display","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.060a0866.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react'\n\nexport default ({id, videoLink, onVideoEnd, showRef}) => {\n    \n    const videoRef = useRef(null);\n\n    useEffect(() => {\n        showRef(videoRef, id)\n        // eslint-disable-next-line\n    }, [])\n\n    return (\n        <div className=\"video-container\">\n            <video \n                onEnded={onVideoEnd}\n                className=\"hidden\"\n                ref={videoRef}\n                key={videoLink}\n                controls preload=\"auto\">\n\n                <source src={`/videos/${videoLink}`} type=\"video/mp4\"/>\n\n            </video>\n        </div>\n    )\n\n}\n ","const directory = {\n    start: {\n        label: 'intro',\n        link: '1.mp4',\n        choices: ['A1','B1']\n    },\n    A1: {\n        name: 'A1',\n        label: 'This is A1',\n        link: '1a.mp4',\n        choices: ['A2', 'AB2']\n    },\n    B1: {\n        name: 'B1',\n        label: 'This is B1',\n        link: '1b.mp4',\n        choices: ['B2', 'AB2']\n    },\n    A2: {\n        name: 'A2',\n        label: 'This is A2',\n        link: '2a.mp4'\n    },\n    AB2: {\n        name: 'AB2',\n        label: 'This is AB2',\n        link: '2ab.mp4'\n    },\n    B2: {\n        name: 'B2',\n        label: 'This is B2',\n        link: '2b.mp4'\n    }\n}\n\nexport default directory","import React ,{ useRef, useEffect } from 'react';\nimport dir from '../videoDirectory';\n\nexport default ({buttonChecked, startClick, choiceClick, choices, addButtonRef}) => {\n\n    const buttonA = useRef(null)\n    const buttonB = useRef(null)\n\n    const onButtonClick = (side,e) => {\n        if (!buttonChecked) {\n            choiceClick(side)\n        }\n    }\n\n    useEffect(() => {\n        addButtonRef(buttonA, 'A')\n        addButtonRef(buttonB, 'B')\n        // eslint-disable-next-line\n    }, [])\n\n    return (\n\n        <div className={`controlsContainer ${choices ? 'space' : 'center'}`}>\n\n            {\n                choices ?\n                <button \n                    ref={buttonA}\n                    className='left-button hidden'\n                    onClick={e => onButtonClick('left',e)}\n                >{dir[choices[0]].label}\n                </button> : null\n            }\n\n            <button className=\"start-button\" onClick={startClick}>Start</button>\n\n            {\n                choices ?\n                <button \n                    ref={buttonB}\n                    className='right-button hidden'\n                    onClick={e => onButtonClick('right',e)}\n                >{dir[choices[1]].label}\n                </button> : null\n            }  \n\n        </div>\n\n    )\n\n}","import React, {useState, useEffect, useRef} from 'react';\nimport './App.css';\nimport Player from './components/Player';\nimport Controls from './components/Controls';\nimport dir from './videoDirectory';\n\nfunction App() {\n\n    const initialRender = useRef(true)\n\n    let [countdownStatus, setCountdownStatus] = useState(false)\n    let [buttonRefs, setButtonRefs] = useState({})\n    let [videoRefs, setVideoRefs] = useState({})\n    let [playerLinks, setPlayerLinks] = useState({\n        p1: '1.mp4',\n    })\n    let [dirRef, setDirRef] = useState(null)\n    let [activePlayer, setActivePlayer] = useState(null)\n    let [queuedPlayer, setQueuedPlayer] = useState(null)\n    let [queuedChoice, setQueuedChoice] = useState(null)\n    let [buttonChecked, setButtonChecked] = useState(false)\n    let [ending, setEnding] = useState(false)\n    let [creditShow, setCreditShow] = useState(false)\n\n    let players = ['p1','p2','p3']\n\n    const setVisiblePlayer = (propPlayer) => {\n        console.log('setting visibility')\n        players.forEach(player => {\n            player === propPlayer ?\n                videoRefs[player].current.classList.remove('hidden')\n            :\n                videoRefs[player].current.classList.add('hidden')\n        }) \n    }\n\n    const startNextVideo = () => {\n        console.log(queuedPlayer)\n        setVisiblePlayer(queuedPlayer)\n        videoRefs[queuedPlayer].current.play()\n    }\n\n    const addVideoRef = (ref, id) => {\n        let newRefs = videoRefs\n        newRefs[id] = ref\n        setVideoRefs(newRefs)\n    }\n\n    const startCountdownLine = () => {\n        setCountdownStatus(true)\n        setTimeout(() => {\n            setCountdownStatus(false)\n        }, 6000)\n    }\n\n    const buttonOpacityToggle = (bool) => {\n        Object.keys(buttonRefs).forEach(buttonKey => {\n            bool ? \n                buttonRefs[buttonKey].current.classList.remove('hidden')\n                :\n                buttonRefs[buttonKey].current.classList.add('hidden')\n        })\n    }\n\n    const addButtonRef = (ref, id) => {\n        let newRefs = buttonRefs\n        newRefs[id] = ref\n        setButtonRefs(newRefs)\n    }\n\n    const loadChoices = () => {\n        let choices = dirRef.choices\n        let vacantPlayers = players.filter(player => player !== activePlayer)\n        let links = {...playerLinks};\n        choices.forEach((choice,i) => {\n            links[vacantPlayers[i]] = dir[choice].link\n        })\n        setPlayerLinks(links)\n    }\n\n    useEffect(() => {\n        if (!initialRender.current && dirRef.choices) {\n            loadChoices()\n        }\n    // eslint-disable-next-line\n    }, [dirRef])\n\n    useEffect(() => {\n        if (!initialRender.current) {\n            let remainingTime = videoRefs[activePlayer].current.duration - videoRefs[activePlayer].current.currentTime\n            setTimeout(startNextVideo, remainingTime * 1000 - 500)\n        }\n    // eslint-disable-next-line\n    }, [queuedPlayer])\n\n    useEffect(() => {\n        if (initialRender.current) {\n            initialRender.current = false\n        } else if (dirRef.choices){\n            let videoLength = videoRefs[activePlayer].current.duration\n            setTimeout(() => {\n                buttonOpacityToggle(true)\n                startCountdownLine()\n            }, videoLength * 1000 - 7000)\n            setTimeout(() => {\n                let choice = Math.random() < 0.5 ? 'left' : 'right';\n                onChoiceClick(choice)\n            }, videoLength * 1000 - 2000)\n        } else {\n            setEnding(true)\n        }\n    // eslint-disable-next-line\n    }, [activePlayer])\n\n    const onChoiceClick = (side) => {\n        if (!buttonRefs.A.current.classList.contains('active') && !buttonRefs.B.current.classList.contains('active')) {\n            let vacantPlayers = players.filter(player => player !== activePlayer)\n            if (side === 'left') {\n                setQueuedPlayer(vacantPlayers[0])\n                setQueuedChoice(dirRef.choices[0])\n                buttonRefs.A.current.classList.add('active')\n            } else {\n                setQueuedPlayer(vacantPlayers[1])\n                setQueuedChoice(dirRef.choices[1])\n                buttonRefs.B.current.classList.add('active')\n            }\n            setButtonChecked(true)\n        }\n    }\n\n    const onVideoEnd = () => {\n        if (!ending) {\n            setActivePlayer(queuedPlayer)\n            setDirRef(dir[queuedChoice])\n            setButtonChecked(false)\n            buttonOpacityToggle(false)\n            buttonRefs.A.current.classList.remove('active')\n            buttonRefs.B.current.classList.remove('active')\n        } else {\n            setCreditShow(true)\n        }\n    }\n\n    const onStartClick = (e) => {\n        videoRefs.p1.current.play()\n        e.currentTarget.style.display = \"none\"\n        setActivePlayer('p1')\n        setDirRef(dir.start)\n        setVisiblePlayer('p1')\n    }\n\n    return (\n        <div className=\"App\">\n            { countdownStatus ? <div className=\"countdown-line\"></div> : null} \n            <div className=\"videos-wrapper\">\n                <Player\n                    id=\"p1\" \n                    videoLink={playerLinks.p1}\n                    onVideoEnd={onVideoEnd}\n                    showRef={addVideoRef}\n                />\n                <Player\n                    id=\"p2\"\n                    videoLink={playerLinks.p2}\n                    onVideoEnd={onVideoEnd}\n                    showRef={addVideoRef}\n                />\n                <Player\n                    id=\"p3\"\n                    videoLink={playerLinks.p3}\n                    onVideoEnd={onVideoEnd}\n                    showRef={addVideoRef}\n                />\n            </div>\n            \n            <Controls\n                buttonChecked={buttonChecked}\n                startClick={onStartClick}\n                choices={dirRef ? dirRef.choices : null}\n                choiceClick={onChoiceClick}\n                addButtonRef={addButtonRef}\n            />\n\n            <div className={`credits ${creditShow ? '' : 'hidden'}`}>\n\n                <p>Credits</p>\n\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}